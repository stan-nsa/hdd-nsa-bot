from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from emoji import emojize #Overview of all emoji: https://carpedm20.github.io/emoji/

import nhl
import db
import keyboards


#-- –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ --
import json
with open('config.json') as f:
    config = json.load(f)
#----


bot = Bot(token=config['API_TOKEN'])
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n"
                        "–Ø NHL-–±–æ—Ç!\n\n"
                        "–ù–∞–ø–∏—à–∏ –º–Ω–µ –ø–æ —Å—Å—ã–ª–∫–µ: @HDD_nsa_bot –∏ –∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è!\n"
                        "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:\n"
                        "/results - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –º–∞—Ç—á–µ–π\n"
                        "/today - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
                        "/yesterday - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –Ω–∞ –≤—á–µ—Ä–∞\n"
                        "/tomorrow - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
                        "\n"
                        "–°–¥–µ–ª–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                        "/set\n"
                        "–ò —Ç–æ–≥–¥–∞ –Ø —Å–º–æ–≥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:\n"
                        "/schedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥\n", \
                        parse_mode="HTML")


@dp.message_handler(commands=['gameday'])
async def send_schedule_gameday(message: types.Message):
    await message.answer(f"#GameDay - {emojize(':calendar:')} <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π:</b>\n{nhl.get_schedule_today()}", parse_mode="HTML")


@dp.message_handler(commands=['schedule'])
async def send_schedule_team(message: types.Message):
    await message.reply(f"{emojize(':calendar:')} <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –ª—é–±–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n{nhl.get_schedule_user_teams(message.from_user)}", parse_mode="HTML")


@dp.message_handler(commands=['today'])
async def send_schedule_today(message: types.Message):
    await message.reply(f"{emojize(':calendar:')} <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π:</b>\n{nhl.get_schedule_today()}", parse_mode="HTML")


@dp.message_handler(commands=['tomorrow'])
async def send_schedule_today(message: types.Message):
    await message.reply(f"{emojize(':calendar:')} <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π:</b>\n{nhl.get_schedule_tomorrow()}", parse_mode="HTML")


@dp.message_handler(commands=['yesterday'])
async def send_schedule_today(message: types.Message):
    await message.reply(f"{emojize(':calendar:')} <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π:</b>\n{nhl.get_schedule_yesterday()}", parse_mode="HTML")


@dp.message_handler(commands=['results'])
async def send_results_today(message: types.Message):
    await message.reply(f"{emojize(':goal_net::ice_hockey:')} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π:</b>\n{nhl.get_results_today()}", parse_mode="HTML")


@dp.message_handler(commands=['set'])
async def user_settings(message: types.Message):
    db.insert_user(message.from_user)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user['first_name']}!\n–ó–∞ –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ç—ã –±–æ–ª–µ–µ—à—å?", parse_mode="HTML", reply_markup=keyboards.init_kb_user_settings())


@dp.message_handler(commands=['favorites'])
async def user_settings(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –±–æ–ª–µ–µ—à—å:", reply_markup=keyboards.init_kb_user_favorites_teams(message.from_user))


@dp.message_handler(commands=['followed'])
async def user_settings(message: types.Message):
    await message.reply(f"–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—à—å —Å–ª–µ–¥–∏—Ç—å:", reply_markup=keyboards.init_kb_followed_teams(message.from_user))


@dp.callback_query_handler(Text(startswith='favorites_'))
async def favorites(callback : types.CallbackQuery):
    team = callback.data.split('_')[1]
    user = callback.from_user
    db.insert_favorites(user, team)
    await callback.answer(f"–ö–æ–º–∞–Ω–¥–∞ '{team.split(':')[1]}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=True)


@dp.callback_query_handler(Text(startswith='followed_'))
async def followed(callback : types.CallbackQuery):
    team = callback.data.split('_')[1]
    user = callback.from_user
    db.insert_favorites(user, team, 'followed')
    await callback.answer(f"–ö–æ–º–∞–Ω–¥–∞ '{team.split(':')[1]}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –°–ª–µ–∂–µ–Ω–∏—è!", show_alert=True)


@dp.message_handler(commands=['test'])
async def send_test(message: types.Message):
    await message.reply('<tg-spoiler><a href="https://ya.ru">CARüèíPIT</a></tg-spoiler>', parse_mode="HTML")
    await bot.send_message(message.from_user.id, 'test')
    await message.delete()


"""
@dp.message_handler()
async def echo(message: types.Message):
    #print(message.text)
    #await message.answer(message.text)
    #await message.answer(message.text, parse_mode='HTML')
    #await message.answer(message.text, parse_mode='MarkdownV2')
    await message.answer(message.text)
    await message.answer(message.md_text)
    await message.answer(message.html_text)
    # –î–æ–ø–æ–ª–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
    await message.answer(f'<u>–í–∞—à —Ç–µ–∫—Å—Ç</u>:\n\n{message.html_text}', parse_mode='HTML')
"""

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

